import java.lang.*;import java.util.*;import java.io.*;public class Wiggle_Sequence {  public static void main(String[] args) {    Scanner in = new Scanner(System.in);    for (String file_name : args) {      try {        BufferedReader br = new BufferedReader(new FileReader(file_name));        String line = br.readLine();        int counter = 1;        while (line != null) {          System.out.printf("CASE %5d: %-1s\n", counter++, line);          List<Integer> input = null;          if (line.indexOf("Customized:") >= 0) {            input = get_customized_input(line);          } else if (line.indexOf("Random:") >= 0) {            input = get_randomized_input(line);          } else {            throw new IllegalArgumentException("The line must begin with either Customized: or Random:");          }          System.out.println("List: ");          print_list(input);          int longest_wiggle_subsequence_1 = length_longest_wiggle_subsequence_1(input);          int longest_wiggle_subsequence_2 = length_longest_wiggle_subsequence_2(input);          int longest_wiggle_subsequence_3 = length_longest_wiggle_subsequence_3(input);          int longest_wiggle_subsequence_4 = length_longest_wiggle_subsequence_4(input);          System.out.println("Longest wiggle subsequence:");          System.out.println("SOLUTION 1: " + longest_wiggle_subsequence_1);          System.out.println("SOLUTION 2: " + longest_wiggle_subsequence_2);          System.out.println("SOLUTION 3: " + longest_wiggle_subsequence_3);          System.out.println("SOLUTION 4: " + longest_wiggle_subsequence_4);          if (longest_wiggle_subsequence_1 != longest_wiggle_subsequence_2 ||              longest_wiggle_subsequence_1 != longest_wiggle_subsequence_3 ||              longest_wiggle_subsequence_1 != longest_wiggle_subsequence_4) {            System.out.println("FAILED");            break;          }          System.out.println("--------------------------------------------------------------------------------------\n");          line = br.readLine();        }        br.close();      } catch (IOException io_exception) {        System.err.println("IOException occurs");        io_exception.printStackTrace();      }    }  }  private static int length_longest_wiggle_subsequence_1(List<Integer> list) {    if (list.size() < 2) {      return list.size();    }    return 1 + Math.max(      length_longest_wiggle_subsequence_1(list, 0, true),      length_longest_wiggle_subsequence_1(list, 0, false));  }  private static int length_longest_wiggle_subsequence_1(List<Integer> list, int index, boolean up) {    int max_len = 0;    for (int i = index + 1; i < list.size(); i++) {      if ((up && list.get(i) > list.get(index)) || (!up && list.get(i) < list.get(index))) {        max_len = Math.max(max_len, 1 + length_longest_wiggle_subsequence_1(list, i, !up));      }    }    return max_len;  }  private static int length_longest_wiggle_subsequence_2(List<Integer> list) {    if (list.size() < 2) {      return list.size();    }    int len = list.size();    int[] down = new int[len];    int[] up = new int[len];    up[0] = down[0] = 1;    for (int end = 1; end < len; end++) {      for (int i = 0; i < end; i++) {        if (list.get(i) < list.get(end)) {          up[end] = Math.max(up[end], 1 + down[i]);        } else if (list.get(i) > list.get(end)) {          down[end] = Math.max(down[end], 1 + up[i]);        }      }    }    return Math.max(up[len - 1], down[len - 1]);  }  private static int length_longest_wiggle_subsequence_3(List<Integer> list) {    if (list.size() < 2) {      return list.size();    }    int len = list.size();    int[] down = new int[len];    int[] up = new int[len];    up[0] = down[0] = 1;    for (int i = 1; i < len; i++) {      if (list.get(i) > list.get(i - 1)) {        up[i] = 1 + down[i - 1];        down[i] = down[i - 1];      } else if (list.get(i) < list.get(i - 1)) {        down[i] = 1 + up[i - 1];        up[i] = up[i - 1];      } else {        up[i] = up[i - 1];        down[i] = down[i - 1];      }    }    return Math.max(up[len - 1], down[len - 1]);  }  private static int length_longest_wiggle_subsequence_4(List<Integer> list) {    if (list.size() < 2) {      return list.size();    }    int up = 1;    int down = 1;    for (int i = 1; i < list.size(); i++) {      if (list.get(i) > list.get(i - 1)) {        up = down + 1;      } else if (list.get(i) < list.get(i - 1)) {        down = up + 1;      }    }    return Math.max(up, down);  }  private static List<Integer> get_customized_input(String line) {    int index_of_opening_bracket = line.indexOf("[");    int index_of_closing_bracket = line.indexOf("]");    line = line.substring(index_of_opening_bracket + 1, index_of_closing_bracket).trim();    List<Integer> list = new ArrayList<>();    for (String int_str : line.split(",")) {      list.add(Integer.parseInt(int_str.trim()));    }    return list;  }  private static List<Integer> get_randomized_input(String line) {    return null;  }  private static void print_list(List<Integer> list) {    for (int i = 0; i < list.size(); i++) {      System.out.printf("%5d - %5d\n", i, list.get(i));    }    System.out.println();  }}